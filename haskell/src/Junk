-- Contains potential junk but it might be useful later


-- This is actually properties of the shield maybe not what we want
-- But overall it can also be seem as transforming a MDP into a new MDP (section 5.1)
preemptiveShield :: M -> Shield -> M
preemptiveShield _M _S =
  -- Product of the original MDP and the state space of the shield
  let _S' = undefined
      -- For each s' in S' create a new subset of available actions
      -- Apply the shield to Aₛ to get A'ₛ
      -- So that gets us a bunch of A'ₛ but how do we get A'?
      _A' = undefined
      -- We only want transition functions from P for actions in A'ₛ
      _P' = undefined
      _R' = undefined
  in M _S' M.s_i  _A' _P' _R'


-- | Preemptive Shield iteration
-- Given the time step compute a set of safe actions (remove unsafe actions)
-- Environment executes one action and moves to the next state providing a reward
-- I think the paper describes this more clearly even though this might be harder to use
-- The input alphabet Σᵢ = Σᵢ¹ x Σᵢ² = L x A
-- The output alphabet Σₒ = 2ᴬ
-- Where A is the boolean 'Actions' in the MDP
-- preemptiveShieldIter :: (L, A) -> Set A
-- preemptiveShieldIter (l, a) = undefined



-- | Used for synthesizing the shield
-- Defines a set Fᵍ  ⊆ G of safe states
-- Where win(g₀, g₁, ...) iff ∀i ≥ 0. gᵢ ∈ Fᵍ
-- I think we can solve for this using SMT. In the original implementation they used BDDs.
-- safetyGame ∷ G -> G
-- safetyGame g = undefined

-- safetyGame ∷ S _Σᵢ¹ _Σᵢ² _Σ₀ -> SafetyAutomaton -> S _ _
-- safetyGame=
--     let g = undefined
--         q = undefined
--         _Σᵢ = undefined
--         _Σₒ= undefined
--         δ' = undefined -- (g, σᵢ ) = (g, σᵢ, ρ(g, σᵢ))
--         ρ = undefined
--     in undefined -- TODO S q _Σᵢ _Σₒ δ'

-- | Uses the safety game to synthesize a shield which implements the winning strategy in a new reactive system (Is it a finite reactive system?)
-- shield ∷ Shield _Σᵢ _Σ₀
-- shield =
--     let g = undefined
--         q = undefined
--         _Σᵢ = undefined
--         _Σₒ= undefined
--         δ' = undefined -- (g, σᵢ ) = (g, σᵢ, ρ(g, σᵢ))
--         ρ = undefined
--     in undefined -- TODO S q _Σᵢ _Σₒ δ'





-- | A trace I think?
type Trace = [Set Prop]

-- | Does the trace satisfy the LTL
satisfies :: forall _APᵢ _AP₀. Trace -> Int -> LTL _APᵢ _AP₀ -> Bool
satisfies σ idx formula = case formula of
  APᵢ p ->
    idx < length σ && p `elem` (σ !! idx)
  AP₀ p ->
    idx < length σ && p `elem` (σ !! idx)
  Not f ->
    not (satisfies σ idx f)
  And f1 f2 ->
    satisfies σ idx f1 && satisfies σ idx f2
  Or f1 f2 ->
    satisfies σ idx f1 || satisfies σ idx f2
  Implies f1 f2 ->
    if satisfies σ idx f1 then satisfies σ idx f2 else True
  X f ->
    satisfies σ (idx + 1) f
  G f ->
    all (\i -> satisfies σ i f) [idx .. length σ - 1]
  F f ->
    any (\i -> satisfies σ i f) [idx .. length σ - 1]
  U f1 f2 ->
    let future = drop idx σ
        holdsAt i = satisfies σ i f2 && all (\j -> satisfies σ j f1) [idx .. i - 1]
    in any holdsAt [idx .. length σ - 1]




-- | A trace I think?
type Trace = [Set Prop]

-- | Does the trace satisfy the LTL
satisfies :: forall _APᵢ _AP₀. Trace -> Int -> LTL _APᵢ _AP₀ -> Bool
satisfies σ idx formula = case formula of
  APᵢ p ->
    idx < length σ && p `elem` (σ !! idx)
  AP₀ p ->
    idx < length σ && p `elem` (σ !! idx)
  Not f ->
    not (satisfies σ idx f)
  And f1 f2 ->
    satisfies σ idx f1 && satisfies σ idx f2
  Or f1 f2 ->
    satisfies σ idx f1 || satisfies σ idx f2
  Implies f1 f2 ->
    if satisfies σ idx f1 then satisfies σ idx f2 else True
  X f ->
    satisfies σ (idx + 1) f
  G f ->
    all (\i -> satisfies σ i f) [idx .. length σ - 1]
  F f ->
    any (\i -> satisfies σ i f) [idx .. length σ - 1]
  U f1 f2 ->
    let future = drop idx σ
        holdsAt i = satisfies σ i f2 && all (\j -> satisfies σ j f1) [idx .. i - 1]
    in any holdsAt [idx .. length σ - 1]

-- | A trace I think?
type Trace = [Set Prop]

-- | Does the trace satisfy the LTL
satisfies :: forall _APᵢ _AP₀. Trace -> Int -> LTL _APᵢ _AP₀ -> Bool
satisfies σ idx formula = case formula of
  APᵢ p ->
    idx < length σ && p `elem` (σ !! idx)
  AP₀ p ->
    idx < length σ && p `elem` (σ !! idx)
  Not f ->
    not (satisfies σ idx f)
  And f1 f2 ->
    satisfies σ idx f1 && satisfies σ idx f2
  Or f1 f2 ->
    satisfies σ idx f1 || satisfies σ idx f2
  Implies f1 f2 ->
    if satisfies σ idx f1 then satisfies σ idx f2 else True
  X f ->
    satisfies σ (idx + 1) f
  G f ->
    all (\i -> satisfies σ i f) [idx .. length σ - 1]
  F f ->
    any (\i -> satisfies σ i f) [idx .. length σ - 1]
  U f1 f2 ->
    let future = drop idx σ
        holdsAt i = satisfies σ i f2 && all (\j -> satisfies σ j f1) [idx .. i - 1]
    in any holdsAt [idx .. length σ - 1]

-- | A trace I think?
type Trace = [Set Prop]

-- | Does the trace satisfy the LTL
satisfies :: forall _APᵢ _AP₀. Trace -> Int -> LTL _APᵢ _AP₀ -> Bool
satisfies σ idx formula = case formula of
  APᵢ p ->
    idx < length σ && p `elem` (σ !! idx)
  AP₀ p ->
    idx < length σ && p `elem` (σ !! idx)
  Not f ->
    not (satisfies σ idx f)
  And f1 f2 ->
    satisfies σ idx f1 && satisfies σ idx f2
  Or f1 f2 ->
    satisfies σ idx f1 || satisfies σ idx f2
  Implies f1 f2 ->
    if satisfies σ idx f1 then satisfies σ idx f2 else True
  X f ->
    satisfies σ (idx + 1) f
  G f ->
    all (\i -> satisfies σ i f) [idx .. length σ - 1]
  F f ->
    any (\i -> satisfies σ i f) [idx .. length σ - 1]
  U f1 f2 ->
    let future = drop idx σ
        holdsAt i = satisfies σ i f2 && all (\j -> satisfies σ j f1) [idx .. i - 1]
    in any holdsAt [idx .. length σ - 1]
-- | A trace I think?
type Trace = [Set Prop]

-- | Does the trace satisfy the LTL
satisfies :: forall _APᵢ _AP₀. Trace -> Int -> LTL _APᵢ _AP₀ -> Bool
satisfies σ idx formula = case formula of
  APᵢ p ->
    idx < length σ && p `elem` (σ !! idx)
  AP₀ p ->
    idx < length σ && p `elem` (σ !! idx)
  Not f ->
    not (satisfies σ idx f)
  And f1 f2 ->
    satisfies σ idx f1 && satisfies σ idx f2
  Or f1 f2 ->
    satisfies σ idx f1 || satisfies σ idx f2
  Implies f1 f2 ->
    if satisfies σ idx f1 then satisfies σ idx f2 else True
  X f ->
    satisfies σ (idx + 1) f
  G f ->
    all (\i -> satisfies σ i f) [idx .. length σ - 1]
  F f ->
    any (\i -> satisfies σ i f) [idx .. length σ - 1]
  U f1 f2 ->
    let future = drop idx σ
        holdsAt i = satisfies σ i f2 && all (\j -> satisfies σ j f1) [idx .. i - 1]
    in any holdsAt [idx .. length σ - 1]
